// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 Authors of kdoctor-io
// SPDX-License-Identifier: Apache-2.0

package echo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostKdoctoragentHandlerFunc turns a function with the right signature into a post kdoctoragent handler
type PostKdoctoragentHandlerFunc func(PostKdoctoragentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostKdoctoragentHandlerFunc) Handle(params PostKdoctoragentParams) middleware.Responder {
	return fn(params)
}

// PostKdoctoragentHandler interface for that can handle valid post kdoctoragent params
type PostKdoctoragentHandler interface {
	Handle(PostKdoctoragentParams) middleware.Responder
}

// NewPostKdoctoragent creates a new http.Handler for the post kdoctoragent operation
func NewPostKdoctoragent(ctx *middleware.Context, handler PostKdoctoragentHandler) *PostKdoctoragent {
	return &PostKdoctoragent{Context: ctx, Handler: handler}
}

/*
	PostKdoctoragent swagger:route POST /kdoctoragent echo postKdoctoragent

echo http request counts

echo http request counts
*/
type PostKdoctoragent struct {
	Context *middleware.Context
	Handler PostKdoctoragentHandler
}

func (o *PostKdoctoragent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostKdoctoragentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
